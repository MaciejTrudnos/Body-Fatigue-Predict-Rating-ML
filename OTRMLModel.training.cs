﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace Body_Fatigue_Predict_Rating_ML
{
    public partial class OTRMLModel
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"AverageLyingBPM", @"AverageLyingBPM"),new InputOutputColumnPair(@"MaxLyingBPM", @"MaxLyingBPM"),new InputOutputColumnPair(@"MinLyingBPM", @"MinLyingBPM"),new InputOutputColumnPair(@"AverageLyingIBI", @"AverageLyingIBI"),new InputOutputColumnPair(@"MaxLyingIBI", @"MaxLyingIBI"),new InputOutputColumnPair(@"MinLyingIBI", @"MinLyingIBI"),new InputOutputColumnPair(@"AverageStandingBPM", @"AverageStandingBPM"),new InputOutputColumnPair(@"MaxStandingBPM", @"MaxStandingBPM"),new InputOutputColumnPair(@"MinStandingBPM", @"MinStandingBPM"),new InputOutputColumnPair(@"AverageStandingIBI", @"AverageStandingIBI"),new InputOutputColumnPair(@"MaxStandingIBI", @"MaxStandingIBI"),new InputOutputColumnPair(@"MinStandingIBI", @"MinStandingIBI"),new InputOutputColumnPair(@"DiffPositionBpm", @"DiffPositionBpm"),new InputOutputColumnPair(@"DiffPositionIbi", @"DiffPositionIbi")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"AverageLyingBPM",@"MaxLyingBPM",@"MinLyingBPM",@"AverageLyingIBI",@"MaxLyingIBI",@"MinLyingIBI",@"AverageStandingBPM",@"MaxStandingBPM",@"MinStandingBPM",@"AverageStandingIBI",@"MaxStandingIBI",@"MinStandingIBI",@"DiffPositionBpm",@"DiffPositionIbi"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Rating",inputColumnName:@"Rating"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(new LbfgsMaximumEntropyMulticlassTrainer.Options(){L1Regularization=0.04465325F,L2Regularization=0.2551157F,LabelColumnName=@"Rating",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
